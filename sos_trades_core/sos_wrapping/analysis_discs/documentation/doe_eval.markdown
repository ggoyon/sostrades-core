# Documentation for the SoSTrades DoE_Eval driver

The DoE_Eval driver is dedicated to perform Design of Experiments (DoE). 

It allows to:
1. Step 1: Generate (or provide)  an "input sample of data". 
2. Step 2: Run a nested sub_process on the rows of this input sample. A loop is performed on all row of this sample, so as to compute the nested sub_process. 


## Types and ordering rules

This input sample is either generated based on a selected alghorithm of DoE (lhs, fullfactorial, ...), or provided by the user (Custom DoE).

The user selects the input variables that he wants to vary for the DoE by using the "Eval_input selector". 
Those variables are then the columns of the input sample:

- In case of a sample generated by an algorithm (lhs, fullfactorial, ...), the variables should be in the following numerical types : ['float', 'array', 'int']. 
  Please refer to the algorithm documentation provided in [gemseo DoE algorithms](https://gemseo.readthedocs.io/en/stable/algorithms/doe_algos.html).

- In case of a Custom DoE, the sample may have more variables (for its columns) than what is selected in the Eval_input selector. 
  However, it should have ALL the selected variables by the "Eval_input selector". 
  Remark: the order of the columns in the sample needs not to be the same as the one provided by the "Eval_input selector".

- An "Input Samples Data" table of data is provided in the outputs of this driver (it corresponds to the outcome of the already mentioned "Step 1"). 
  Its columns follow the "Eval_input selector" order and are only the used variables for the DoE. 
  In case of a Custom DoE with more columns than those selected in "Eval_input selector", only selected Eval_input variables are kept in this dataset table.

## GUI inputs : Selected example
The selected example for this manual is a DoE applied to the MDAO well known "sellar problem". There exists a SoSTrades process for this example and it can be selected as follows: 
![Example of doe process](./doe_eval_png/DoE_Eval_01.PNG)
![Study creation](./doe_eval_png/DoE_Eval_02.PNG).
![Tree view example](./doe_eval_png/DoE_Eval_03.PNG)

The user is then ready to provide the inputs depending on his needs.
The user's inputs will be both parameters for the DoE driver and for the nested subprocess: it is then a set of "reference values", which are a "reference point" where the nested process is computed. 
Those reference values will be then used for each variable that is not a selected variables to vary in the DoE.

## GUI inputs : Overview
 
The overall process appears as a tree view:
- the study name: e.g. Example_Doe_Eval_Sellar
- the driver name: e.g. DoEEval
- the tree of the nested subprocess: (Sellar_1,Sellar_2,Sellar_Problem)

![Tree view example](./doe_eval_png/DoE_Eval_03.PNG)

The main parameters associated to the DoE driver are: Algo of sampling, Evaluated Inputs, and Evaluated Outputs.
![Main inputs](./doe_eval_png/DoE_Eval_04.PNG)

## GUI inputs: Inputs/Outputs selection

The user needs to select the variables he wants to be varied for its DoE by using the "Evaluated Inputs" selector.
We point out that the other (not selected) variables will be fixed and get the value of "reference values" provided in the sub-process.

![Eval in](./doe_eval_png/DoE_Eval_05.PNG)

He also needs to select the output variables (at least one) to be displayed at the end of a run: in this example "obj" is selected. 

![Eval out](./doe_eval_png/DoE_Eval_06.PNG)
 
Remark:
- After configuration, he will then see a read only empty "Input Samples Data" (it will be the sample that is provided/created and run in the DoE): 
![Eval out](./doe_eval_png/DoE_Eval_11.PNG)
- He also will see several "dict of output variables" (empty and in read only here) for each selected output variables: here "obj_dict" as we have selected the obj variable.
After a run, each dict of output variable with have the same size as the "Input Samples Data".

## GUI inputs: algorithm selection 
The user needs to select the algorithm he want for the "input sample of data":

![Eval in](./doe_eval_png/DoE_Eval_07.PNG)

## GUI inputs: Custom DoE selection 
In case of a Custom DOE, he will get (after configuration) the following new dynamic inputs: "Algorithm options" and "Custom sample dataframe".
![Eval in](./doe_eval_png/DoE_Eval_12.PNG)

He can provide inputs for "Algorithm options": 

![Eval in](./doe_eval_png/DoE_Eval_13.PNG)

and for "Custom sample dataframe": he can add new rows with values or update values

![Eval in](./doe_eval_png/DoE_Eval_14.PNG)

Warning: 
- The Custom DoE CAN have more column variables as the selected variables in Eval_input: the extra variables will not be taken into account. 
  A warning message will tell you what are the extra column variables not taken into account. It is the reference value of the variable (provided in the sub_process) that will be used in the run.
- The Custom DoE MUST HAVE at least all the selected variables in Eval_input: if not then it will rise an exception error with a message telling you what are the missing variables

## GUI inputs: doe generation algorithm selection
If it is not a Custom DoE, the users will get (after configuration) the following new dynamic inputs: "Algorithm options" and "Design Space".
![Eval in](./doe_eval_png/DoE_Eval_08.PNG)

He can provide inputs for "Algorithm options": 

![Eval in](./doe_eval_png/DoE_Eval_09.PNG)

and for "Design Space": he needs to provide values for lower and upper numerical bounds.

![Eval in](./doe_eval_png/DoE_Eval_10.PNG)


For more information about the provided algorithms, please refer to the algorithm documentation provided in [gemseo DoE algorithms](https://gemseo.readthedocs.io/en/stable/algorithms/doe_algos.html).

## GUI inputs: subprocess reference inputs
The user NEEDs also to provide a reference value for each input variable of the nested subprocess (except for variable already provided by a default value).
For example, in case of this sellar example: 
![Eval in](./doe_eval_png/DoE_Eval_15.PNG)
![Eval in](./doe_eval_png/DoE_Eval_18.PNG)
![Eval in](./doe_eval_png/DoE_Eval_19.PNG)

## GUI inputs: run
When all inputs data have been provided, and saved, the user can run the DoE, that goes from the configuration state, to Pending and Done (or Failure with error message if somethong goes wrong). 

![Eval in](./doe_eval_png/DoE_Eval_16.PNG)
![Eval in](./doe_eval_png/DoE_Eval_17.PNG)
![Eval in](./doe_eval_png/DoE_Eval_20.PNG)

## GUI outputs: 
Then the user can see and post-treat the results.
In the output section of the DoE driver, he will find the "Input Samples Data"  and several "dict of output variables" (for example obj_dict) populated with data results.
![Eval in](./doe_eval_png/DoE_Eval_21.PNG)

For this sellar example, here are the "Input Samples Data":
![Eval in](./doe_eval_png/DoE_Eval_22.PNG)

and the obj_dict column of results:

![Eval in](./doe_eval_png/DoE_Eval_23.PNG)

Remark: the last row is for the reference input values and associated results. The users can also find those reference data in the input/output widgets of the subprocess.

## Strucrure of Desc_in/Desc_out
Please find here an overview description of the Input/Output widgets tree structure (where Dec_in and desc_out stand for input and output descriptions):

        |_ DESC_IN
                |_ EVAL_INPUTS (namespace: 'ns_doe_eval', structuring,dynamic : self.sub_proc_build_status != 'Empty_SP') NB: Mandatory not to be empty (If not then warning)
                |_ EVAL_OUTPUTS (namespace: 'ns_doe_eval', structuring, dynamic : self.sub_proc_build_status != 'Empty_SP') NB: Mandatory not to be empty (If not then warning)
                |_ SAMPLING_ALGO (structuring,dynamic : self.sub_proc_build_status != 'Empty_SP')
                        |_ CUSTOM_SAMPLES_DF (dynamic: SAMPLING_ALGO=="CustomDOE") NB: default DESIGN_SPACE depends on EVAL_INPUTS (As to be "Not empty") And Algo 
                        |_ DESIGN_SPACE (dynamic: SAMPLING_ALGO!="CustomDOE") NB: default DESIGN_SPACE depends on EVAL_INPUTS (As to be "Not empty") And Algo
                        |_ ALGO_OPTIONS (structuring, dynamic: SAMPLING_ALGO != None)
            |_ N_PROCESSES
            |_ WAIT_TIME_BETWEEN_FORK
            |_ NS_IN_DF (dynamic: if sub_process_ns_in_build is not None)
        |_ DESC_OUT
            |_ SAMPLES_INPUTS_DF (namespace: 'ns_doe_eval')
            |_ <var>_dict (internal namespace 'ns_doe', dynamic: sampling_algo!='None' and eval_inputs not empty and eval_outputs not empty, for <var> in eval_outputs)

and a short definition of those DESC parameters:

        EVAL_INPUTS:                    selection of input variables to be used for the DoE
        EVAL_OUTPUTS:                   selection of output variables to be used for the DoE (the selected observables)
        SAMPLING_ALGO:                  method of defining the sampling input dataset for the variable chosen in self.EVAL_INPUTS
        N_PROCESSES:
        WAIT_TIME_BETWEEN_FORK:
        SAMPLES_INPUTS_DF :             copy of the generated or provided input sample
        ALL_NS_DICT :                   a map of ns keys: values
        CUSTOM_SAMPLES_DF:              provided input sample
        DESIGN_SPACE:                   provided design space
        ALGO_OPTIONS:                   options depending of the choice of self.SAMPLING_ALGO
        <var observable name>_dict':    for each selected output observable doe result
                                        associated to sample and the selected observable
## Other information
- There is no "MDAO formulation" capability available in this DoE_Eval driver (refer to [gemseo formulation](https://gemseo.readthedocs.io/en/stable/mdo/mdo_formulations.html) and to the SoSTrades DoE_Scenario driver as regards to MDAO formulation)

## References
- Wikipedia definition of a DoE ([link](https://en.wikipedia.org/wiki/The_Design_of_Experiments))
- Martins & Ning, Engineering Design Optimization, 2021 ([link](http://websites.umich.edu/~mdolaboratory/pdf/Martins2021.pdf))
- Gemseo page about DoE algorithms ([link](https://gemseo.readthedocs.io/en/stable/algorithms/doe_algos.html))
- W. Tinsson. Cours 1 et 2 Plans d'exp\`erience 
        ([link1](https://reseau-mexico.fr/sites/reseau-mexico.fr/files/PECNUM_cours1_tinsson.pdf),
        [link2](https://reseau-mexico.fr/sites/reseau-mexico.fr/files/PECNUM_cours2_tinsson.pdf))